// <auto-generated />
using System;
using AuthSystem.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace AuthSystem.Migrations
{
    [DbContext(typeof(NContext))]
    [Migration("20201116161832_MiniMove")]
    partial class MiniMove
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("AuthSystem.Areas.Identity.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "a18be9c0-aa65-4af8-bd17-00bd9344e575",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8770baa4-54ab-4534-bfa5-c932af4b2564",
                            Email = "admin@admin.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@ADMIN.COM",
                            NormalizedUserName = "ADMIN@ADMIN.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEM+k7gtBKbSA0WSaY1v5UdGT9pChCcqgQ3O3SNpS72q5JDbkp/3n5YfAJgbVKgkcPg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "admin@admin.com"
                        });
                });

            modelBuilder.Entity("AuthSystem.Models.Articolo", b =>
                {
                    b.Property<string>("CodiceArticolo")
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Descrizione")
                        .IsRequired()
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("CodiceArticolo");

                    b.ToTable("Articoli");
                });

            modelBuilder.Entity("AuthSystem.Models.CentroDiLavoro", b =>
                {
                    b.Property<string>("CodiceCentroDiLavoro")
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Descrzione")
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("CodiceCentroDiLavoro");

                    b.ToTable("CentriDiLavoro");
                });

            modelBuilder.Entity("AuthSystem.Models.DistintaComponente", b =>
                {
                    b.Property<string>("CodiceComponente")
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("CodiceArticolo")
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Descrizione")
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("Quantita")
                        .HasColumnType("int");

                    b.HasKey("CodiceComponente");

                    b.HasIndex("CodiceArticolo");

                    b.ToTable("DistintaComponenti");
                });

            modelBuilder.Entity("AuthSystem.Models.GerarchiaDistintaComponente", b =>
                {
                    b.Property<string>("CodiceComponentePadre")
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("CodiceComponente")
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("DescrizioneComponentePadre")
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("CodiceComponentePadre");

                    b.HasIndex("CodiceComponente");

                    b.ToTable("GerarchiaDistintaComponente");
                });

            modelBuilder.Entity("AuthSystem.Models.MacchinaFisica", b =>
                {
                    b.Property<string>("CodiceMacchinaFisica")
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("CodiceCentroDiLavoro")
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Descrizione")
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("CodiceMacchinaFisica");

                    b.HasIndex("CodiceCentroDiLavoro");

                    b.ToTable("MacchinaFisica");
                });

            modelBuilder.Entity("AuthSystem.Models.Odl", b =>
                {
                    b.Property<string>("CodiceOdl")
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("CodiceArticolo")
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime>("DataFine")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataInizio")
                        .HasColumnType("datetime2");

                    b.Property<int>("QuantitaDaProdurre")
                        .HasColumnType("int");

                    b.HasKey("CodiceOdl");

                    b.HasIndex("CodiceArticolo");

                    b.ToTable("Odls");
                });

            modelBuilder.Entity("AuthSystem.Models.OdlFase", b =>
                {
                    b.Property<int>("IdFaseOdl")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CodiceArticolo")
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("CodiceCentroDiLavoro")
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("CodiceOdl")
                        .HasColumnType("nvarchar(128)");

                    b.Property<int>("FaseOdl")
                        .HasColumnType("int");

                    b.HasKey("IdFaseOdl");

                    b.HasIndex("CodiceArticolo");

                    b.HasIndex("CodiceCentroDiLavoro");

                    b.HasIndex("CodiceOdl");

                    b.ToTable("OdlFasi");
                });

            modelBuilder.Entity("AuthSystem.Models.OdlFaseVersamento", b =>
                {
                    b.Property<int>("IdVersamento")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CodiceArticolo")
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("CodiceMacchinaFisica")
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("CodiceOdl")
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime>("DataFine")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataInizio")
                        .HasColumnType("datetime2");

                    b.Property<string>("IdAspNetUsers")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("IdFaseODL")
                        .HasColumnType("int");

                    b.Property<int>("PezziBuoni")
                        .HasColumnType("int");

                    b.Property<int>("PezziScartati")
                        .HasColumnType("int");

                    b.Property<DateTime>("TempoLavoroNetto")
                        .HasColumnType("datetime2");

                    b.HasKey("IdVersamento");

                    b.HasIndex("CodiceArticolo");

                    b.HasIndex("CodiceMacchinaFisica");

                    b.HasIndex("CodiceOdl");

                    b.HasIndex("IdAspNetUsers");

                    b.HasIndex("IdFaseODL");

                    b.ToTable("OdlFaseVersamenti");
                });

            modelBuilder.Entity("AuthSystem.Models.Postazione", b =>
                {
                    b.Property<int>("IdPostazione")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Descrizione")
                        .IsRequired()
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("NomePostazione")
                        .IsRequired()
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("IdPostazione");

                    b.ToTable("Postazioni");

                    b.HasData(
                        new
                        {
                            IdPostazione = 1,
                            Descrizione = "Blocco in alto: posto in alto a sinistra",
                            NomePostazione = "Posto1"
                        },
                        new
                        {
                            IdPostazione = 2,
                            Descrizione = "Blocco in alto: posto in alto al centro",
                            NomePostazione = "Posto2"
                        },
                        new
                        {
                            IdPostazione = 3,
                            Descrizione = "Blocco in alto: posto in alto a destra",
                            NomePostazione = "Posto3"
                        },
                        new
                        {
                            IdPostazione = 4,
                            Descrizione = "Blocco in alto: posto in basso a destra",
                            NomePostazione = "Posto4"
                        },
                        new
                        {
                            IdPostazione = 5,
                            Descrizione = "Blocco in alto: posto in basso al centro",
                            NomePostazione = "Posto5"
                        },
                        new
                        {
                            IdPostazione = 6,
                            Descrizione = "Blocco in alto: posto in basso a sinistra",
                            NomePostazione = "Posto6"
                        },
                        new
                        {
                            IdPostazione = 7,
                            Descrizione = "Blocco centrale: posto in alto a destra",
                            NomePostazione = "Posto7"
                        },
                        new
                        {
                            IdPostazione = 8,
                            Descrizione = "Blocco centrale: posto in alto al centro",
                            NomePostazione = "Posto8"
                        },
                        new
                        {
                            IdPostazione = 9,
                            Descrizione = "Blocco centrale: posto in alto a sinistra",
                            NomePostazione = "Posto9"
                        },
                        new
                        {
                            IdPostazione = 10,
                            Descrizione = "Blocco centrale: posto in basso a sinistra",
                            NomePostazione = "Posto10"
                        },
                        new
                        {
                            IdPostazione = 11,
                            Descrizione = "Blocco centrale: posto in basso al centro",
                            NomePostazione = "Posto11"
                        },
                        new
                        {
                            IdPostazione = 12,
                            Descrizione = "Blocco centrale: posto in basso a destra",
                            NomePostazione = "Posto12"
                        },
                        new
                        {
                            IdPostazione = 13,
                            Descrizione = "Blocco in basso: posto in alto al centro",
                            NomePostazione = "Posto13"
                        },
                        new
                        {
                            IdPostazione = 14,
                            Descrizione = "Blocco in basso: posto in alto a sinistra",
                            NomePostazione = "Posto14"
                        },
                        new
                        {
                            IdPostazione = 15,
                            Descrizione = "Blocco in basso: posto in basso a sinistra",
                            NomePostazione = "Posto15"
                        },
                        new
                        {
                            IdPostazione = 16,
                            Descrizione = "Blocco in basso: posto in basso al centro",
                            NomePostazione = "Posto16"
                        },
                        new
                        {
                            IdPostazione = 17,
                            Descrizione = "Blocco in basso: posto in basso a destra",
                            NomePostazione = "Posto17"
                        },
                        new
                        {
                            IdPostazione = 18,
                            Descrizione = "Blocco in basso: posto in alto a destra",
                            NomePostazione = "Posto18"
                        },
                        new
                        {
                            IdPostazione = 19,
                            Descrizione = "Sala MOVE: posto in alto a destra",
                            NomePostazione = "Posto19"
                        },
                        new
                        {
                            IdPostazione = 20,
                            Descrizione = "Sala MOVE: posto in alto a sinistra",
                            NomePostazione = "Posto20"
                        },
                        new
                        {
                            IdPostazione = 21,
                            Descrizione = "Sala MOVE: posto a capotavola sinistra",
                            NomePostazione = "Posto21"
                        },
                        new
                        {
                            IdPostazione = 22,
                            Descrizione = "Sala MOVE: posto in basso a destra",
                            NomePostazione = "Posto22"
                        },
                        new
                        {
                            IdPostazione = 23,
                            Descrizione = "Sala MOVE: posto in basso a sinistra",
                            NomePostazione = "Posto23"
                        },
                        new
                        {
                            IdPostazione = 24,
                            Descrizione = "Sala Digital Manufacturing: posto a sinistra",
                            NomePostazione = "Posto24"
                        },
                        new
                        {
                            IdPostazione = 25,
                            Descrizione = "Sala Digital Manufacturing: posto in basso ",
                            NomePostazione = "Posto25"
                        },
                        new
                        {
                            IdPostazione = 26,
                            Descrizione = "Sala Digital Manufacturing: posto a destra",
                            NomePostazione = "Posto26"
                        });
                });

            modelBuilder.Entity("AuthSystem.Models.Prenotazione", b =>
                {
                    b.Property<int>("IdPrenotazione")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Data")
                        .HasColumnType("datetime2");

                    b.Property<string>("IdAspNetUsers")
                        .HasColumnType("nvarchar(450)")
                        .HasMaxLength(450);

                    b.Property<int>("IdPostazione")
                        .HasColumnType("int");

                    b.HasKey("IdPrenotazione");

                    b.HasIndex("IdAspNetUsers");

                    b.HasIndex("IdPostazione");

                    b.ToTable("Prenotazioni");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "a18be9c0-aa65-4af8-bd17-00bd9344e575",
                            ConcurrencyStamp = "fe02e2e2-3b59-4006-ba8c-04b817446e4d",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "37c42e1d - 92e5 - 4216 - a308 - 2fa43d187bf1",
                            ConcurrencyStamp = "ea55df16-f9c0-46ab-b2d0-4fe0bb04e8dd",
                            Name = "User",
                            NormalizedName = "User"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "a18be9c0-aa65-4af8-bd17-00bd9344e575",
                            RoleId = "a18be9c0-aa65-4af8-bd17-00bd9344e575"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("AuthSystem.Models.DistintaComponente", b =>
                {
                    b.HasOne("AuthSystem.Models.Articolo", "Articoli")
                        .WithMany()
                        .HasForeignKey("CodiceArticolo");
                });

            modelBuilder.Entity("AuthSystem.Models.GerarchiaDistintaComponente", b =>
                {
                    b.HasOne("AuthSystem.Models.DistintaComponente", "DistintaComponenti")
                        .WithMany()
                        .HasForeignKey("CodiceComponente");
                });

            modelBuilder.Entity("AuthSystem.Models.MacchinaFisica", b =>
                {
                    b.HasOne("AuthSystem.Models.CentroDiLavoro", "CentriDiLavoro")
                        .WithMany("MacchineFisiche")
                        .HasForeignKey("CodiceCentroDiLavoro");
                });

            modelBuilder.Entity("AuthSystem.Models.Odl", b =>
                {
                    b.HasOne("AuthSystem.Models.Articolo", "Articoli")
                        .WithMany()
                        .HasForeignKey("CodiceArticolo");
                });

            modelBuilder.Entity("AuthSystem.Models.OdlFase", b =>
                {
                    b.HasOne("AuthSystem.Models.Articolo", "Articoli")
                        .WithMany()
                        .HasForeignKey("CodiceArticolo");

                    b.HasOne("AuthSystem.Models.CentroDiLavoro", "CentriDiLavoro")
                        .WithMany()
                        .HasForeignKey("CodiceCentroDiLavoro");

                    b.HasOne("AuthSystem.Models.Odl", "Odls")
                        .WithMany()
                        .HasForeignKey("CodiceOdl");
                });

            modelBuilder.Entity("AuthSystem.Models.OdlFaseVersamento", b =>
                {
                    b.HasOne("AuthSystem.Models.Articolo", "Articoli")
                        .WithMany()
                        .HasForeignKey("CodiceArticolo");

                    b.HasOne("AuthSystem.Models.MacchinaFisica", "MacchinaFisiche")
                        .WithMany()
                        .HasForeignKey("CodiceMacchinaFisica");

                    b.HasOne("AuthSystem.Models.Odl", "Odl")
                        .WithMany()
                        .HasForeignKey("CodiceOdl");

                    b.HasOne("AuthSystem.Areas.Identity.Data.ApplicationUser", "AspNetUsers")
                        .WithMany()
                        .HasForeignKey("IdAspNetUsers");

                    b.HasOne("AuthSystem.Models.OdlFase", "OdlFasi")
                        .WithMany()
                        .HasForeignKey("IdFaseODL")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AuthSystem.Models.Prenotazione", b =>
                {
                    b.HasOne("AuthSystem.Areas.Identity.Data.ApplicationUser", "AspNetUsers")
                        .WithMany()
                        .HasForeignKey("IdAspNetUsers");

                    b.HasOne("AuthSystem.Models.Postazione", "Postazioni")
                        .WithMany()
                        .HasForeignKey("IdPostazione")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("AuthSystem.Areas.Identity.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("AuthSystem.Areas.Identity.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AuthSystem.Areas.Identity.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("AuthSystem.Areas.Identity.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
